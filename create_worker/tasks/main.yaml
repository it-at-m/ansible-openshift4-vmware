- set_fact:
    retry_counter: "{{ retry_counter|default(0)|int + 1 }}"
  tags:
    - create_worker

- block:

  - name: Determine infrastructure_id
    include_role:
      name: determine_infrastructure_id
      apply:
        tags:
          - create_worker
    tags:
      - create_worker

  - name: remove resourcePool in worker MachineSet
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        metadata:
          labels:
            machine.openshift.io/cluster-api-cluster: "{{ infrastructure_id.stdout }}"
          name: "{{ infrastructure_id.stdout }}-{{ worker_machineset_item.0.value.role }}-{{ worker_machineset_item.0.value.name }}-{{ worker_machineset_item.1.key }}-{{ worker_machineset_item.0.value.version }}" 
          namespace: openshift-machine-api
        spec:
          template:
            spec:
              providerSpec:
                value:
                  workspace:
                    resourcePool: null
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: worker_machineset_item
    when:
    - worker_machineset_item.0.key != ''
    - worker_machineset_item.0.value != ''
    - worker_machineset_item.0.value.role != 'infra'
    ignore_errors: yes
    tags:
      - create_worker

  - name: remove resourcePool in infra MachineSet
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        metadata:
          labels:
            machine.openshift.io/cluster-api-cluster: "{{ infrastructure_id.stdout }}"
          name: "{{ infrastructure_id.stdout }}-{{ infra_machineset_item.0.value.role }}-{{ infra_machineset_item.1.key }}-{{ infra_machineset_item.0.value.version }}" 
          namespace: openshift-machine-api
        spec:
          template:
            spec:
              providerSpec:
                value:
                  workspace:
                    resourcePool: null
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: infra_machineset_item
    when:
    - infra_machineset_item.0.key != ''
    - infra_machineset_item.0.value != ''
    - infra_machineset_item.0.value.role == 'infra'
    ignore_errors: yes
    tags:
      - create_worker
  
  - name: Create/modify MachineSet
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition: "{{ lookup('template', 'machine_set.j2') }}"
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: machineset_item
    when:
    - machineset_item[0].key != ''
    - machineset_item[0].value != ''
    register: machineset
    tags:
      - create_worker

  - name: create MachineConfigPool for worker nodes
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition: "{{ lookup('template', 'machineconfigpool.j2') }}"
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: machineconfigpool_item
    when: 
      - machineconfigpool_item.0.value.role != 'worker'
    tags:
      - create_worker
 
  - name: Wait for nodes to get ready
    k8s_info:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      api_version: machine.openshift.io/v1beta1
      name: "{{ infrastructure_id.stdout }}-{{ worker_ready_item.0.value.role }}-{{ worker_ready_item.0.value.name }}-{{ worker_ready_item.1.key }}-{{ worker_ready_item.0.value.version }}"
      namespace: openshift-machine-api
      kind: MachineSet
    register: machine_set
    until: machine_set|json_query( 'resources[*].status.readyReplicas | [0]' )|int == worker_ready_item.0.value.count|int
    retries: 60
    delay: 10
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: worker_ready_item
    when:
    - worker_ready_item.0.key != ''
    - worker_ready_item.0.value != ''
    - worker_ready_item.0.value.role != 'infra'
    tags:
      - create_worker

  - name: Wait for infra nodes to get ready
    k8s_info:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      api_version: machine.openshift.io/v1beta1
      name: "{{ infrastructure_id.stdout }}-{{ infra_ready_item.0.value.role }}-{{ infra_ready_item.1.key }}-{{ infra_ready_item.0.value.version }}"
      namespace: openshift-machine-api
      kind: MachineSet
    register: machine_set
    until: machine_set|json_query( 'resources[*].status.readyReplicas | [0]' )|int == infra_ready_item.0.value.count|int
    retries: 60
    delay: 10
    loop: "{{ openshift_worker_nodes | dict2items | product(openshift_node_zones | dict2items) | list }}"
    loop_control:
      loop_var: infra_ready_item
    when:
    - infra_ready_item.0.key != ''
    - infra_ready_item.0.value != ''
    - infra_ready_item.0.value.role == 'infra'
    tags:
      - create_worker
  
  - name: Remove MachineSet "{{ infrastructure_id.stdout }}-worker-0" on production
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      state: absent
      definition:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        metadata:
          name:  "{{ infrastructure_id.stdout }}-worker-0"
          namespace: openshift-machine-api
      wait: true
    when: not (cluster_id == "capc" or cluster_id == "capktest")
    tags:
      - create_worker

  - name: Scale down MachineSet "{{ infrastructure_id.stdout }}-worker-0" to 0 on non-production
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition:
        apiVersion: machine.openshift.io/v1beta1
        kind: MachineSet
        metadata:
          name:  "{{ infrastructure_id.stdout }}-worker-0"
          namespace: openshift-machine-api
        spec:
          replicas: 0
      wait: true
    when: (cluster_id == "capc" or cluster_id == "capktest")
    tags:
      - create_worker
  
  - name: Get worker nodes
    k8s_info:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      kind: Node
    register: cluster_nodes
    tags:
      - create_worker
  
  - name: Save worker node names to variable cluster_node_names
    debug:
      msg: "{{ cluster_nodes | json_query('resources[*].[metadata.name] | []')}}"
    register: cluster_node_names
    tags:
      - create_worker
  
  - name: set egress cidr to worker nodes
    k8s:
      api_key: "{{ k8s_auth_api_key.user_input }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      definition:
        apiVersion: network.openshift.io/v1
        kind: HostSubnet
        metadata:
          name: "{{ cidr_item }}"
        egressCIDRs:
        - "{{ machine_network }}"
        host: "{{ cidr_item }}"
    when:
      - '"worker" in cidr_item'
    loop: "{{ cluster_node_names.msg|flatten(levels=1) }}"
    loop_control:
      loop_var: cidr_item
    tags:
      - create_worker

  - set_fact:
      retry_counter:
    tags:
      - create_worker

  rescue:
    - name: Pause for 10 seconds before retry
      pause:
        seconds: 10
      when: retry_counter|int < include_max|default(3)|int
      tags:
        - create_worker
  
    - include_tasks: main.yaml
      when: retry_counter|int < include_max|default(3)|int
      tags:
        - create_worker
      
    - fail:
        msg: Failed to meet conditional
      when: retry_counter|int >= include_max|default(3)|int
      tags:
        - create_worker
