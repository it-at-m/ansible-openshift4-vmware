- name: Getting process IDs of openshift-install
  register: pids_of_openshift_install
  pids:
      name: openshift-install

- name: Fail if openshift-install is already running
  when: ( pids_of_openshift_install.pids != [] )
  fail:
    msg: Another openshift-install process is already running!!!

- name: Check if old Cluster "{{ cluster_id }}" exists
  register: stat_result
  stat:
    path: "{{ openshift_install_directory }}/{{ cluster_id }}"

- register: deinstall_old_cluster
  when: 
    - stat_result.stat.exists
    - openshift_baremetal is not truthy(convert_bool=True)
  pause:
    prompt: "Do you want to deinstall old cluster {{ cluster_id }} (yes/no)?"

- register: remove_old_cluster_config
  when: 
    - stat_result.stat.exists
    - openshift_baremetal is truthy(convert_bool=True)
  pause:
    prompt: "Do you want to remove configuration of cluster {{ cluster_id }} (yes/no)?"

- name: Fail if old cluster exists and should not be deleted
  when:
    - stat_result.stat.exists 
    - openshift_baremetal is not truthy(convert_bool=True)
    - not deinstall_old_cluster.user_input | bool 
  fail:
    msg: Old cluster will not be deleted, failing!!!

- name: Fail if old cluster config exists and should not be deleted
  when:
    - stat_result.stat.exists 
    - openshift_baremetal is truthy(convert_bool=True)
    - not remove_old_cluster_config.user_input | bool 
  fail:
    msg: Old cluster config will not be deleted, failing!!!

- name: Prepare openshift installer environment
  tags: download_oc
  include_tasks: update_installer.yaml

- name: Deinstalling existing vsphere cluster "{{ cluster_id }}"
  when:
    - stat_result.stat.exists 
    - deinstall_old_cluster.user_input is defined
    - deinstall_old_cluster.user_input | bool
    - openshift_baremetal is not truthy(convert_bool=True)
  include_tasks: deinstall_vsphere_cluster.yaml

- name: Remove existing configurations of baremetal cluster "{{ cluster_id }}"
  when:
    - stat_result.stat.exists
    - openshift_baremetal is truthy(convert_bool=True)
    - remove_old_cluster_config is defined
    - remove_old_cluster_config.user_input | bool
  block:

  - name: Remove old install directory "{{ cluster_id }}"
    become: true
    file:
      path: "{{ openshift_install_directory }}/{{ cluster_id }}"
      state: absent 

- name: Create new cluster "{{ cluster_id }}"
  when: 
    - (not stat_result.stat.exists) or ( openshift_baremetal is not truthy(convert_bool=True) and (deinstall_old_cluster.user_input | bool) ) or ( openshift_baremetal is truthy(convert_bool=True) and ( remove_old_cluster_config.user_input | bool ) )
  rescue:
    - name: Pause for 10 seconds before retry
      when: retry_counter|int < include_max|default(2)|int
      pause:
        seconds: 10

    - name: include main task for retry
      when: retry_counter|int < include_max|default(2)|int
      include_tasks: main.yaml

    - name: Getting process IDs of openshift-install
      register: pids_of_openshift_install
      pids:
          name: openshift-install

    - name: Kill openshift-install if it is still running
      become: true
      when: ( pids_of_openshift_install.pids != [] )
      shell: pkill -f openshift-install

    - name: fail installation
      when: retry_counter|int >= include_max|default(3)|int
      fail:
        msg: Installation failed
  block:

  - set_fact:
      retry_counter: "{{ retry_counter|default(0)|int + 1 }}"

  - name: Create new install directory "{{ cluster_id }}"
    become: true
    file:
      path: "{{ openshift_install_directory }}/{{ cluster_id }}"
      state: directory
      owner: root
      group: "{{ file_group }}"
      mode: '2770'

  - name: Create "{{ openshift_install_directory }}/{{ cluster_id }}/install-config.yaml" from template
    become: true
    template:
      src: install-config.j2
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/install-config.yaml"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'
      trim_blocks: false

  - name: Create "{{ openshift_install_directory }}/{{ cluster_id }}/agent-config.yaml" from template for baremetal install
    when: openshift_baremetal is truthy(convert_bool=True)
    become: true
    template:
      src: agent-config.j2
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/agent-config.yaml"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'
      trim_blocks: false

  - name: Create new cluster manifests for "{{ cluster_id }}"
    when: openshift_baremetal is not truthy(convert_bool=True)
    become: true
    shell: "{{ openshift_install_directory }}/openshift-install create manifests --dir={{ openshift_install_directory }}/{{ cluster_id }}"

  - name: Create "openshift" subdirectory
    become: true
    file:
      path: "{{ openshift_install_directory }}/{{ cluster_id }}/openshift"
      state: directory
      owner: root
      group: "{{ file_group }}"
      mode: '2770'

  - name: Create "cluster-network-03-config.yml" from template for OpenShiftSDN in multitenant mode
    become: true
    when: openshift_sdn_network == true
    template:
      src: cluster-network-03-config.j2
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/manifests/cluster-network-03-config.yml"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'

  - name: Create "99-cleanup-arp-cache.yaml" from template for arp cache cleanup
    become: true
    when: openshift_sno is not truthy(convert_bool=True)
    template:
      src: 99-cleanup-arp-cache.j2
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/openshift/99-cleanup-arp-cache.yaml"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'

  - name: Copy cluster configuration files to install openshift for static ip install
    become: true
    loop:
      - 99-master-chrony.yaml
    loop_control:
      loop_var: config_file
    when: 
      - openshift_sdn_network == false
      - openshift_baremetal is not truthy(convert_bool=True)
    copy:
      src: "{{ config_file }}"
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/openshift/{{ config_file }}"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'
  
  - name: Copy cluster configuration files to install openshift for baremetal install
    become: true
    loop:
      - 99-master-chrony.yaml
      - 99-worker-chrony.yaml
    loop_control:
      loop_var: config_file
    when: openshift_baremetal is truthy(convert_bool=True)
    copy:
      src: "{{ config_file }}"
      dest: "{{ openshift_install_directory }}/{{ cluster_id }}/openshift/{{ config_file }}"
      owner: root
      group: "{{ file_group }}"
      mode: '0660'

  - name: Create new baremetal iso for cluster "{{ cluster_id }}"
    become: true
    environment:
      https_proxy: "{{ openshift_proxy }}"
      TMPDIR: "/opt/lhm/cap"
    when: openshift_baremetal is truthy(convert_bool=True)
    register: openshift4_install
    shell: "{{ openshift_install_directory }}/openshift-install agent create image --dir={{ openshift_install_directory }}/{{ cluster_id }} --log-level=info"

  - name: Install vsphere cluster
    when: openshift_baremetal is not truthy(convert_bool=True)
    include_tasks: install_vsphere_cluster.yaml

  - name: Install baremetal cluster
    when: openshift_baremetal is truthy(convert_bool=True)
    include_tasks: install_baremetal_cluster.yaml

  - include_tasks: distill_api_certificates.yaml
 
  - name: Get kubeadmin password from log file
    become: true
    register: kubeadmin_password
    shell: 
      cmd: |
        grep kubeadmin "{{ openshift_install_directory }}/{{ cluster_id }}"/.openshift_install.log | cut -d'\' -f4 | sed s/\"// | tail -1

  # Do not validate certs on baremetal clusters, because there is no ingress-certificate in the kubeconfig file
  - name: oc login to "{{ cluster_api }}" with user "kubeadmin"
    register: k8s_auth_results
    until: k8s_auth_results.k8s_auth.api_key is defined
    retries: 5
    delay: 10
    k8s_auth:
      username: "kubeadmin"
      password: "{{ kubeadmin_password.stdout }}"
      host: "{{ cluster_api }}"
      ca_cert: "{{ api_certificate_path }}"
      validate_certs: "{{ openshift_baremetal is not truthy(convert_bool=True)  }}"

  - name: set k8s_auth_api_key.user_input
    set_fact: 
      k8s_auth_api_key: { user_input: "{{ k8s_auth_results.k8s_auth.api_key }}" }

  - name: Perform central oc login command 
    shell: |
      oc login --token={{ k8s_auth_api_key.user_input }} --server={{ cluster_api }} --certificate-authority={{ api_certificate_path }}
